name: Lint

on:
  pull_request:
    branches: [ main ]  # Adjust this to your default branch name if different

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Set up the appropriate language environment
    # Uncomment the relevant section for your project's language

    # For Python projects
    # - name: Set up Python
    #   uses: actions/setup-python@v2
    #   with:
    #     python-version: '3.x'

    # For Node.js projects
    # - name: Set up Node.js
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: '14'

    # For Ruby projects
    # - name: Set up Ruby
    #   uses: ruby/setup-ruby@v1
    #   with:
    #     ruby-version: '3.0'

    # Install dependencies
    - name: Install dependencies
      run: |
        # For Python (using pip)
        # pip install -r requirements.txt
        # pip install pylint flake8

        # For Node.js (using npm)
        # npm ci

        # For Ruby (using Bundler)
        # bundle install

    # Run linter(s)
    - name: Run linters
      run: |
        For Python (using Pylint and Flake8)
        pylint **/*.py
        flake8 .

        # For JavaScript (using ESLint)
        # npx eslint .

        # For Ruby (using RuboCop)
        # bundle exec rubocop

    # Optional: Add a step to annotate the GitHub diff if the linter supports it
    # - name: Annotate linting results
    #   uses: actions/github-script@v6
    #   if: failure()
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       const fs = require('fs')
    #       const lintResults = fs.readFileSync('lint-results.txt', 'utf8')
    #       const annotations = lintResults.split('\n').map(line => {
    #         const [file, lineNumber, column, severity, message] = line.split(':')
    #         return {
    #           path: file,
    #           start_line: parseInt(lineNumber),
    #           end_line: parseInt(lineNumber),
    #           annotation_level: severity.toLowerCase(),
    #           message: message.trim()
    #         }
    #       })
    #       await github.rest.checks.create({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         name: 'Lint Results',
    #         head_sha: context.sha,
    #         status: 'completed',
    #         conclusion: 'failure',
    #         output: {
    #           title: 'Lint Results',
    #           summary: 'There are linting errors.',
    #           annotations: annotations
    #         }
    #       })
